#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# A shortcut function that simplifies usage of xclip.
# source : http://madebynathan.com/2011/10/04/a-nicer-way-to-use-xclip/
# - Accepts input from either stdin (pipe), or params.
# ------------------------------------------------
cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string to the clipboard."
      echo "Usage: cb <string>"
      echo "       echo <string> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}
# Aliases / functions leveraging the cb() function
# ------------------------------------------------
# Copy contents of a file
function cbf() { cat "$1" | cb; }  
# Copy current working directory
alias cbwd="pwd | cb"  

source_env() {
  DIRECTORY="$PWD"
  while true; do
    if [ -f './.env.rc' ]; then
      source './.env.rc'
      SRC=$PWD/.env.rc
      break
    fi
    if [ -f './env' ]; then
      source './env'
      SRC=$PWD/env
      break
    fi
    [ $PWD = '/' ] && break
    [[ -e ".git" ]] && break
    cd -q ..
  done
  cd -q $DIRECTORY
  unset DIRECTORY
  if [[ ! -z $SRC ]] ; then
    echo "..sourced $SRC.."
  else
    echo ".. sourced nothing.."
  fi
}

alias s="sudo"
alias c="cd"
alias e="source_env"

expand-or-complete-with-dots() {
  echo -n "\e[31m......\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots

setopt SHARE_HISTORY

alias cpv="rsync -poghb --backup-dir=/tmp/rsync -e /dev/null --progress --"
